/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.client.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
import org.springframework.core.env.Environment;
import org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.joda.JodaModule;

/**
 * Spring configuration for the null client.
 * This configuration is only active when one of the active profiles is "progman.client.impl.null".
 * Local property file on classpath is used when the "progman.proploc.classpath" profile is active.
 * Property file outside of classpath in the ${SB11_CONFIG_DIR} is used when
 * the "progman.proploc.server.fs" profile is active.
 * The org.opentestsystem.shared.progman.client package is component scanned.
 */
@Configuration
@ComponentScan("org.opentestsystem.shared.progman.client")
@Profile("progman.client.impl.null")
public class ProgramManagementNullClientConfig {

    @Autowired
    private Environment env;

    @Bean
    public String baseLocation() {
        return this.env.getProperty("progman.baseLocation");
    }

    @Bean(name = "progmanObjectMapper")
    public ObjectMapper progmanObjectMapper() {
        final Jackson2ObjectMapperFactoryBean omfb = new Jackson2ObjectMapperFactoryBean();
        omfb.setIndentOutput(true);
        omfb.setSimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        omfb.afterPropertiesSet();

        final ObjectMapper mapper = omfb.getObject();
        mapper.registerModule(new JodaModule());

        return mapper;
    }

}
