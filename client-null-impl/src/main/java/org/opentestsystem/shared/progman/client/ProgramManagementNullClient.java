/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.client;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.opentestsystem.shared.progman.client.domain.ClientPropertyConfiguration;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.progman.client.domain.TenantChain;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Profile;
import org.springframework.context.support.AbstractApplicationContext;
import org.springframework.core.io.Resource;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;

import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Null client reads and writes properties files on the filesystem
 * Only valid if "progman.client.impl.null" is one of the active Spring profiles
 */
@Profile("progman.client.impl.null")
@Component
public class ProgramManagementNullClient implements ProgManClient {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProgramManagementNullClient.class);

    @javax.annotation.Resource
    private String baseLocation;

    @Autowired
    private ObjectMapper progmanObjectMapper;

    @Autowired
    private AbstractApplicationContext springContext;

    /**
     * Not applicable for the Null Client. Must get Configuration by name and envName
     * Always returns null
     */
    @Override
    public ClientPropertyConfiguration getConfigurationById(final String configId) {
        // always returns null
        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClientPropertyConfiguration getConfiguration(final String componentName, final String envName, final String overlay) {
        final Resource fileResource = this.springContext.getResource(this.baseLocation + componentName + "-" + envName + "-config.properties");
        ClientPropertyConfiguration configObj = null;
        File jsonFile = null;
        try {
            jsonFile = fileResource.getFile();
        } catch (final IOException e1) {
            LOGGER.error("Failure to retrieve JSON file: " + e1.getMessage());
        }

        try {
            configObj = this.progmanObjectMapper.readValue(jsonFile, ClientPropertyConfiguration.class);
        } catch (final IOException e) {
            LOGGER.error("Failure to read PropertyConfiguration object from file for: " + componentName + "-" + envName);
        }

        return configObj;
    }

    @Override
    public TenantChain getTenantChain(final Map<TenantType, String> userEntityAttributes) {
        return new TenantChain();
    }

    @Override
    public Map<String, Object> getCustomAssets(final String componentName, final Map<TenantType, String> userEntityAttributes) {
        return new HashMap<String, Object>();
    }

    @Override
    public List<Tenant> findTenantsByComponentAndSearchVal(final String componentName, final Boolean inGoodStanding, final String searchVal, final TenantType tenantType, final Pageable pageable) {
        return null;
    }

    @Override
    public Tenant getTenantById(final String tenantId) {
        return null;
    }

    @Override
    public List<TenantType> getTenantTypes() {
        return null;
    }

    @Override
    public org.opentestsystem.shared.progman.client.domain.Component getComponentByName(final String componentName) {
        return null;
    }

}
