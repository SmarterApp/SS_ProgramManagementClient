/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.client.domain;

import java.io.Serializable;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * Client-side domain object mirrors the server-side domain object
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class ClientPropertyConfiguration implements Serializable {

    private static final long serialVersionUID = 8637834874924762194L;

    private static final int SB_INIT_SIZE = 75;

    private String id;
    private String name;
    private String envName;
    private final Map<String, ClientPropertyEntry> properties = new HashMap<String, ClientPropertyEntry>();

    public String getId() {
        return id;
    }

    public void setId(final String inId) {
        this.id = inId;
    }

    public String getName() {
        return name;
    }

    public void setName(final String inName) {
        this.name = inName;
    }

    public String getEnvName() {
        return envName;
    }

    public void setEnvName(final String inEnvName) {
        this.envName = inEnvName;
    }

    public void setProperties(final List<ClientPropertyEntry> inProperties) {
        if (inProperties != null) {
            for (ClientPropertyEntry clientPropertyEntry : inProperties) {
                properties.put(clientPropertyEntry.getPropertyKey(), clientPropertyEntry);
            }
        }
    }

    public String getPropertyValue(final String inName) {
        if (properties != null && inName != null) {
            ClientPropertyEntry entry = properties.get(inName);
            return entry == null ? null : entry.getPropertyValue();
        }
        return null;
    }


    public Set<String> getPropertyKeys() {
        return properties.keySet();
    }

    @Override
    public String toString() {

        StringBuilder builder = new StringBuilder(SB_INIT_SIZE);
        builder.append("ClientPropertyConfiguration:\nname: ");
        builder.append(name);
        builder.append("\nenvName: ");
        builder.append(envName);
        builder.append("\nId: ");
        builder.append(id);
        builder.append("\nNum Props: ");
        builder.append(properties.size());

        return builder.toString();
    }

    public String getPrintSafePropertyValue(final String inName) {
        ClientPropertyEntry entry = properties.get(inName);
        if (entry != null) {
            return entry.isEncrypted() ? "<encryptedValue>" : entry.getPropertyValue();
        }
        return "<null value>";
    }

}
