/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.init;

import java.util.Set;

import org.opentestsystem.shared.progman.client.domain.ClientPropertyConfiguration;
import org.springframework.core.env.EnumerablePropertySource;

/**
 * This property source understands how to navigate through a PropertyConfig object
 * to return property values. The actual retrieval of the PropertyConfig from the REST service
 * is done from a different class.
 */
public class ProgManPropertySource extends EnumerablePropertySource<ClientPropertyConfiguration> {

    /**
     * A source has a name (which we don't care about)
     * and the actual source of the data (which is a PropertyConfiguration object)
     * @param name
     * @param source
     */
    public ProgManPropertySource(final String name, final ClientPropertyConfiguration source) {
        super(name, source);
        if (logger.isDebugEnabled()) {
            logger.debug("constructing ProgManPropertySource");
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object getProperty(final String name) {
        logger.info("Attempting to get property " + name + " from ProgManPropertySource with value: " + source.getPrintSafePropertyValue(name));
        return source.getPropertyValue(name);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String[] getPropertyNames() {
        logger.info("retrieving keys for ProgManPropertySource");
        Set<String> keys = source.getPropertyKeys();
        return keys.toArray(new String[] {});
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean containsProperty(final String name) {
        logger.info("running containsProperty: " + name);
        return null != source.getPropertyValue(name);
    }

}
