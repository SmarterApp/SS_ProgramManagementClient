/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.init;

import java.util.Arrays;
import java.util.List;

import org.opentestsystem.shared.progman.client.domain.ClientPropertyConfiguration;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.support.BeanDefinitionRegistry;
import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;
import org.springframework.context.ApplicationContextInitializer;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.support.GenericApplicationContext;
import org.springframework.core.Ordered;
import org.springframework.core.io.ClassPathResource;
import org.springframework.web.context.ConfigurableWebApplicationContext;
import org.springframework.web.context.support.XmlWebApplicationContext;

/**
 * Application Context Initializer used as a hook into the Spring initialization process.
 * Sets up a custom PropertySource that can read from a REST call.
 */
public class InitSpringPropertyConfigLoad implements ApplicationContextInitializer<ConfigurableApplicationContext>, Ordered {

    /**
     * Logger
     */
    private static final Logger LOGGER = LoggerFactory.getLogger(InitSpringPropertyConfigLoad.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public void initialize(final ConfigurableApplicationContext applicationContext) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("########### initializing InitSpringPropertyConfigLoad");
        }

        LOGGER.debug("########### loading program management client context from xml");

        GenericApplicationContext propertySourceContext = new GenericApplicationContext();
        XmlBeanDefinitionReader xmlReader = new XmlBeanDefinitionReader(propertySourceContext);
        xmlReader.loadBeanDefinitions(new ClassPathResource("program-management-client-context.xml"));

        String[] activeProfiles = applicationContext.getEnvironment().getActiveProfiles();

        for (String profile : activeProfiles) {

            propertySourceContext.getEnvironment().addActiveProfile(profile);
        }

        propertySourceContext.refresh();

        applicationContext.setParent(propertySourceContext);

        LOGGER.debug("########### Context created, getting ProgManRetriever");

        ProgManRetriever retriever = propertySourceContext.getBean(ProgManRetriever.class);

        LOGGER.debug("########### retrieving property configuration");

        List<ClientPropertyConfiguration> configs = retriever.loadPropertyConfiguration();

        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("########### retrieved the following configurations: " + configs);
        }

        String propSourceName = null;

        for (ClientPropertyConfiguration propConfig : configs) {
            if (propConfig != null) {
                propSourceName = "progManPropertySource-" + propConfig.getName() + "-" + propConfig.getEnvName();
                // This is how you add a new property source to the Spring Environment
                applicationContext.getEnvironment().getPropertySources().addFirst(new ProgManPropertySource(propSourceName, propConfig));
            }
        }

        if (applicationContext instanceof XmlWebApplicationContext) {

            String[] locs = ((ConfigurableWebApplicationContext) applicationContext).getConfigLocations();
            String[] newLocs = Arrays.copyOf(locs, locs.length + 1);

            newLocs[locs.length] = "classpath:spring/progman-loader-config-props-context.xml";

            ((ConfigurableWebApplicationContext) applicationContext).setConfigLocations(newLocs);
        } else {

            XmlBeanDefinitionReader xmlReaderProp = new XmlBeanDefinitionReader((BeanDefinitionRegistry) applicationContext);
            xmlReaderProp.loadBeanDefinitions(new ClassPathResource("spring/progman-loader-config-props-context.xml"));
        }

    }

    /**
     * {@inheritDoc}
     * 
     * @return 1 so that program management is loaded first
     */
    @Override
    public int getOrder() {

        return 1;
    }

}
