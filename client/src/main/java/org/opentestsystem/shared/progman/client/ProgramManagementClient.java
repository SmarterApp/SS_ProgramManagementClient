/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.client;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.shared.progman.client.ProgManClient;
import org.opentestsystem.shared.progman.client.domain.ClientPropertyConfiguration;
import org.opentestsystem.shared.progman.client.domain.Component;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.progman.client.domain.TenantChain;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Profile;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort.Order;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestOperations;

import com.google.common.collect.Maps;

/**
 * Integrated implementation of the Program Management client.
 * Only auto-wired when the "progman.client.impl.integration" profile is active.
 * Talks to a running instance of the Program Management REST api.
 */
@Profile("progman.client.impl.integration")
@org.springframework.stereotype.Component
public class ProgramManagementClient implements ProgManClient {

    private static final String USER_ATTRIBUTES_QUERY_PARAMS;

    static {
        String s = "";
        for (TenantType t : TenantType.values()) {
            s += "&" + t.name() + "={" + t.name() + "}";
        }
        USER_ATTRIBUTES_QUERY_PARAMS = s;
    }

    /**
     * Logger
     */
    private static final Logger LOGGER = LoggerFactory.getLogger(ProgramManagementClient.class);

    /**
     * RestTemplate used to talk to the REST API
     */
    @Resource
    protected RestOperations progmanRestTemplate;

    /**
     * Base URI to use to talk to REST API
     */
    @Resource
    private String baseUri;

    /**
     * {@inheritDoc}
     */
    @Override
    public ClientPropertyConfiguration getConfigurationById(final String configId) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("attempting to call " + baseUri + "propertyConfig/{configId} with " + configId);
        }
        return progmanRestTemplate.getForObject(baseUri + "propertyConfig/{configId}", ClientPropertyConfiguration.class, configId);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClientPropertyConfiguration getConfiguration(final String componentName, final String envName, final String overlay) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("attempting to use " + baseUri + "propertyConfig/name/{name}/envName/{envName} with " + componentName + " and " + envName + " overlayed with:" + overlay);
        }
        return progmanRestTemplate.getForObject(baseUri + "propertyConfig/name/{name}/envName/{envName}?overlay={overlay}", ClientPropertyConfiguration.class, componentName, envName, overlay);

    }

    @Override
    public TenantChain getTenantChain(final Map<TenantType, String> userEntityAttributes) {
        Map<String, String> params = getTenancyParams(userEntityAttributes);
        return progmanRestTemplate.getForObject(baseUri + "tenantchain?" + USER_ATTRIBUTES_QUERY_PARAMS, TenantChain.class, params);
    }

    @SuppressWarnings("unchecked")
    @Override
    public Map<String, Object> getCustomAssets(final String componentName, final Map<TenantType, String> userEntityAttributes) {
        Map<String, String> params = getTenancyParams(userEntityAttributes);
        Map<String, Object> response;
        try {
            response = progmanRestTemplate.getForObject(baseUri + "skinnableAssets/" + componentName + "?" + USER_ATTRIBUTES_QUERY_PARAMS, Map.class, params);
        } catch (RestClientException e) {
            response = new HashMap<String, Object>();
            LOGGER.error("Error getting custom assets", e);
        }
        return response;
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<Tenant> findTenantsByComponentAndSearchVal(final String componentName, final Boolean inGoodStanding, final String searchVal, final TenantType tenantType, final Pageable pageable) {
        StringBuilder restUrl = new StringBuilder(baseUri + "tenant/component/name/" + componentName + "?");
        restUrl.append(buildRequestParam("inGoodStanding", inGoodStanding));
        restUrl.append(buildRequestParam("searchVal", searchVal));
        restUrl.append(buildRequestParam("tenantType", tenantType == null ? null : tenantType.getTypeName()));

        Map<String, String> pageableParams = getPageableParams(pageable);
        restUrl.append(buildRequestParam("page.page", pageableParams.get("page.page")));
        restUrl.append(buildRequestParam("page.size", pageableParams.get("page.size")));
        restUrl.append(buildRequestParam("page.sort", pageableParams.get("page.sort")));
        restUrl.append(buildRequestParam("page.sort.dir", pageableParams.get("page.sort.dir")));
        return progmanRestTemplate.getForObject(restUrl.toString(), List.class);
    }

    @Override
    public Tenant getTenantById(final String tenantId) {
        return progmanRestTemplate.getForObject(baseUri + "tenant/" + tenantId, Tenant.class);
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<TenantType> getTenantTypes() {
        return progmanRestTemplate.getForObject(baseUri + "tenantTypes", List.class);
    }

    @Override
    public Component getComponentByName(final String componentName) {
        return progmanRestTemplate.getForObject(baseUri + "component/name/" + componentName, Component.class);
    }

    private static Map<String, String> getTenancyParams(final Map<TenantType, String> userEntityAttributes) {
        Map<String, String> params = new HashMap<String, String>();
        if (userEntityAttributes != null) {
            for (TenantType t : TenantType.values()) {
                params.put(t.getTypeName(), userEntityAttributes.get(t));
            }
        }
        return params;
    }

    private static Map<String, String> getPageableParams(final Pageable pageable) {
        Map<String, String> params = Maps.newHashMap();
        params.put("page.page", "");
        params.put("page.size", "");
        params.put("page.sort", "");
        params.put("page.sort.dir", "");

        if (pageable != null) {
            params.put("page.page", Integer.toString(pageable.getPageNumber()));
            params.put("page.size", Integer.toString(pageable.getPageSize()));
            if (pageable.getSort() != null && pageable.getSort().iterator().hasNext()) {
                Order firstOrder = pageable.getSort().iterator().next();
                params.put("page.sort", firstOrder.getProperty());
                params.put("page.sort.dir", firstOrder.getDirection().name());
            }
        }

        return params;
    }

    private static String buildRequestParam(final String key, final Object value) {
        String requestParam = "";
        if (value != null && StringUtils.isNotBlank(value.toString())) {
            requestParam = key + "=" + value + "&";
        }
        return requestParam;
    }

}
