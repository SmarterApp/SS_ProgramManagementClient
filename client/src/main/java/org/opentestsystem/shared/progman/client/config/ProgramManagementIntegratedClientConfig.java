/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.client.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
import org.springframework.core.env.Environment;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.security.oauth2.client.OAuth2RestTemplate;
import org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails;
import org.springframework.security.oauth2.client.token.grant.password.ResourceOwnerPasswordResourceDetails;
import org.springframework.security.oauth2.common.AuthenticationScheme;
import org.springframework.web.client.RestOperations;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.joda.JodaModule;

/**
 * Spring configuration for the integrated client.
 * This configuration is only active when one of the active profiles is "progman.client.impl.integration".
 * Local property file on classpath is used when the "progman.proploc.classpath" profile is active.
 * Property file outside of classpath in the ${SB11_CONFIG_DIR} is used when
 * the "progman.proploc.server.fs" profile is active.
 * The org.opentestsystem.shared.progman.client package is component scanned.
 */
@Configuration
@ComponentScan("org.opentestsystem.shared.progman.client")
@Profile("progman.client.impl.integration")
public class ProgramManagementIntegratedClientConfig {

    @Value("${oauth.access.url}")
    private String accessTokenUrl;

    @Value("${pm.oauth.client.id}")
    private String clientId;

    @Value("${pm.oauth.client.secret}")
    private String clientSecret;

    @Value("${pm.oauth.batch.account}")
    private String username;

    @Value("${pm.oauth.batch.password}")
    private String password;

    @Autowired
    private Environment env;

    @Bean
    public HttpComponentsClientHttpRequestFactory progmanClientRequestFactory() {
        return new HttpComponentsClientHttpRequestFactory();
    }

    @Bean
    public OAuth2ProtectedResourceDetails progmanResource() {
        final ResourceOwnerPasswordResourceDetails resourceDetails = new ResourceOwnerPasswordResourceDetails();
        resourceDetails.setUsername(username);
        resourceDetails.setPassword(password);
        resourceDetails.setClientId(this.clientId);
        resourceDetails.setClientSecret(this.clientSecret);
        resourceDetails.setAccessTokenUri(this.accessTokenUrl);
        resourceDetails.setClientAuthenticationScheme(AuthenticationScheme.form);
        return resourceDetails;
    }

    @Bean
    public RestOperations progmanRestTemplate() {
        final OAuth2RestTemplate restTemplate = new OAuth2RestTemplate(progmanResource());
        for (final HttpMessageConverter<?> messageConverter : restTemplate.getMessageConverters()) {
            if (messageConverter instanceof MappingJackson2HttpMessageConverter) {
                final MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter = (MappingJackson2HttpMessageConverter) messageConverter;
                mappingJackson2HttpMessageConverter.setObjectMapper(progmanObjectMapper());
                break;
            }
        }
        return restTemplate;
    }

    @Bean
    public ObjectMapper progmanObjectMapper() {
        final Jackson2ObjectMapperFactoryBean omfb = new Jackson2ObjectMapperFactoryBean();
        omfb.setIndentOutput(true);
        omfb.setSimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        omfb.afterPropertiesSet();

        final ObjectMapper mapper = omfb.getObject();
        mapper.registerModule(new JodaModule());

        return mapper;
    }

    @Bean
    public String baseUri() {
        return this.env.getProperty("progman.baseUri");
    }

}
