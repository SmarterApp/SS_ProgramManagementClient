/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.client;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.junit.Assert.assertThat;
import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;
import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;
import static org.springframework.test.web.client.response.MockRestResponseCreators.withServerError;
import static org.springframework.test.web.client.response.MockRestResponseCreators.withStatus;
import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;

import java.util.HashMap;
import java.util.Map;

import org.junit.Ignore;
import org.junit.Test;
import org.opentestsystem.shared.progman.client.domain.Component;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;

public class SkinnableAssetsClientTest extends AbstractClientTest {

    @Test
    public void clientIsValid() {
        assertThat(this.client, notNullValue());
    }

    @Ignore
    @Test
    public void testGetSkinableAssets404() {

        this.mockServer.expect(requestTo("skinnableAssets/?" + buildExpectedQueryString(new HashMap<TenantType, String>())))
                .andExpect(method(HttpMethod.GET))
                .andRespond(withStatus(HttpStatus.NOT_FOUND));

        final Map<String, Object> result = this.client.getCustomAssets("", new HashMap<TenantType, String>());

        this.mockServer.verify();
        assertThat(result, notNullValue());
        assertThat(result.size(), is(0));
    }

    @Ignore
    @Test
    public void testServerError() {

        this.mockServer.expect(requestTo("skinnableAssets/comp?" + buildExpectedQueryString(new HashMap<TenantType, String>())))
                .andExpect(method(HttpMethod.GET))
                .andRespond(withServerError());

        final Map<String, Object> result = this.client.getCustomAssets("comp", new HashMap<TenantType, String>());

        this.mockServer.verify();
        assertThat(result, notNullValue());
        assertThat(result.size(), is(0));
    }

    @Ignore
    @Test
    public void testGetSkinableAssets() {
        final Tenant t = FACTORY.manufacturePojo(Tenant.class);
        final Component c = FACTORY.manufacturePojo(Component.class);

        final Map<String, Object> response = new HashMap<String, Object>();
        response.put("id", "alkds");
        response.put("tenant", t);
        response.put("component", c);

        final HashMap<String, String> asset = new HashMap<String, String>();
        asset.put("name", "logo");
        asset.put("type", "IMAGE");
        asset.put("property", "/assetPool/assetFile/524c8ee19594ee51ba0d6e4b/logo_sbac.jpg");
        asset.put("assetFileName", "logo_sbac.jpg");
        asset.put("assetFileGridId", "524c8ee19594ee51ba0d6e4b");
        asset.put("basePath", "http://localhost:8089/prog-mgmnt.rest/");
        asset.put("url", "http://localhost:8089/prog-mgmnt.rest//assetPool/assetFile/524c8ee19594ee51ba0d6e4b/logo_sbac.jpg");

        final Map<TenantType, String> userAttrs = new HashMap<TenantType, String>();
        userAttrs.put(TenantType.STATE, "WI");
        this.mockServer.expect(requestTo("skinnableAssets/" + c.getName() + "?" + buildExpectedQueryString(userAttrs))).andExpect(method(HttpMethod.GET))
                .andRespond(withSuccess(buildExpectedResponse(response), MediaType.APPLICATION_JSON));

        final Map<String, Object> result = this.client.getCustomAssets(c.getName(), userAttrs);
        this.mockServer.verify();
        assertThat(result.get("id").toString(), is("alkds"));

    }

    private String buildExpectedQueryString(final Map<TenantType, String> userEntityAttributes) {
        String s = "";
        for (final TenantType t : TenantType.values()) {
            if (s.length() > 0) {
                s += "&";
            }
            s += t.name() + "=";
            if (userEntityAttributes.get(t) != null) {
                s += userEntityAttributes.get(t);
            }
        }
        return s;
    }

}
