/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.progman.client;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;
import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;
import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;

import java.util.List;

import org.junit.Ignore;
import org.junit.Test;
import org.opentestsystem.shared.progman.client.domain.Component;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;

import com.google.common.collect.Lists;

public class ProgramManagementClientTest extends AbstractClientTest {

    @Test
    public void clientIsValid() {
        assertThat(this.client, notNullValue());
    }

    @Ignore
    @Test
    public void findInGoodStandingTenantsByComponentIdNoResults() throws InterruptedException {
        this.mockServer
                .expect(requestTo("tenant/component/name/myComponentName"))
                .andExpect(method(HttpMethod.GET))
                .andRespond(withSuccess("[]", MediaType.APPLICATION_JSON));

        final List<Tenant> foundTenantList = this.client.findTenantsByComponentAndSearchVal("myComponentName", null, null, null, null);
        final List<Tenant> expectedList = Lists.newArrayList();
        assertThat(foundTenantList, is(equalTo(expectedList)));
    }

    @Ignore
    @Test
    public void findInGoodStandingTenantsByComponentId() throws InterruptedException {
        final String tenant1 = "{ \"id\": \"tenant1\" }";
        final String tenant2 = "{ \"id\": \"tenant2\" }";

        this.mockServer
                .expect(requestTo("tenant/component/name/myComponentName?inGoodStanding=true&searchVal=xxx&tenantType=STATE"))
                .andExpect(method(HttpMethod.GET))
                .andRespond(withSuccess("[ " + tenant1 + ", " + tenant2 + " ]", MediaType.APPLICATION_JSON));

        final List<Tenant> foundTenantList = this.client.findTenantsByComponentAndSearchVal("myComponentName", true, "xxx", TenantType.STATE, null);
        assertThat(foundTenantList.size(), is(2));
    }

    @Ignore
    @Test
    public void findInGoodStandingTenantsByComponentIdWithPagingParams() throws InterruptedException {
        final String tenant1 = "{ \"id\": \"tenant1\" }";
        final String tenant2 = "{ \"id\": \"tenant2\" }";
        this.mockServer
                .expect(requestTo("tenant/component/name/componentXXX?page.page=3&page.size=5&page.sort=name&page.sort.dir=DESC"))
                .andExpect(method(HttpMethod.GET))
                .andRespond(withSuccess("[ " + tenant1 + ", " + tenant2 + " ]", MediaType.APPLICATION_JSON));

        final List<Tenant> foundTenantList = this.client.findTenantsByComponentAndSearchVal("componentXXX", null, "", null, new PageRequest(3, 5, Direction.DESC, "name"));
        assertThat(foundTenantList.size(), is(2));
    }

    @Ignore
    @Test
    public void findTenantById() throws InterruptedException {
        final String tenant1 = "{ \"id\": \"tenant1\" }";
        this.mockServer
                .expect(requestTo("tenant/123"))
                .andExpect(method(HttpMethod.GET))
                .andRespond(withSuccess(tenant1, MediaType.APPLICATION_JSON));

        final Tenant foundTenant = this.client.getTenantById("123");
        assertThat(foundTenant, is(not(nullValue())));
    }

    @Ignore
    @Test
    public void findTenantTypes() throws InterruptedException {
        this.mockServer
                .expect(requestTo("tenantTypes"))
                .andExpect(method(HttpMethod.GET))
                .andRespond(withSuccess("[ \"STATE\", \"DISTRICT\" ]", MediaType.APPLICATION_JSON));

        final List<TenantType> foundTenantTypeList = this.client.getTenantTypes();
        assertThat(foundTenantTypeList.size(), is(2));
    }

    @Ignore
    @Test
    public void getComponentByName() throws InterruptedException {
        this.mockServer
                .expect(requestTo("component/name/myComponentName"))
                .andExpect(method(HttpMethod.GET))
                .andRespond(withSuccess("{ \"id\": \"123456\" }", MediaType.APPLICATION_JSON));

        final Component foundComponent = this.client.getComponentByName("myComponentName");
        assertThat(foundComponent, is(not(nullValue())));
    }
}
